diff -up bash-3.2/shell.c.requires bash-3.2/shell.c
--- bash-3.2/shell.c.requires	2006-05-17 14:46:54.000000000 +0200
+++ bash-3.2/shell.c	2008-12-09 14:02:02.000000000 +0100
@@ -175,6 +175,9 @@ int running_under_emacs;
 /* The name of the .(shell)rc file. */
 static char *bashrc_file = "~/.bashrc";
 
+/* Non-zero if we are finding the scripts requirements. */
+int rpm_requires;
+
 /* Non-zero means to act more like the Bourne shell on startup. */
 static int act_like_sh;
 
@@ -233,6 +236,7 @@ struct {
   { "posix", Int, &posixly_correct, (char **)0x0 },
   { "protected", Int, &protected_mode, (char **)0x0 },
   { "rcfile", Charp, (int *)0x0, &bashrc_file },
+  { "rpm-requires", Int, &rpm_requires, (char **)0x0 },
 #if defined (RESTRICTED_SHELL)
   { "restricted", Int, &restricted, (char **)0x0 },
 #endif
@@ -460,6 +464,12 @@ main (argc, argv, env)
   if (dump_translatable_strings)
     read_but_dont_execute = 1;
 
+  if (rpm_requires)
+    {
+      read_but_dont_execute = 1;
+      initialize_shell_builtins ();
+    }
+
   if (running_setuid && privileged_mode == 0)
     disable_priv_mode ();
 
diff -up bash-3.2/doc/bashref.texi.requires bash-3.2/doc/bashref.texi
--- bash-3.2/doc/bashref.texi.requires	2008-12-09 14:02:01.000000000 +0100
+++ bash-3.2/doc/bashref.texi	2008-12-09 14:02:02.000000000 +0100
@@ -4906,6 +4906,13 @@ standard.  @xref{Bash POSIX Mode}, for a
 @item --restricted
 Make the shell a restricted shell (@pxref{The Restricted Shell}).
 
+@item --rpm-requires
+Produce the list of files that are required for the 
+shell script to run.  This implies '-n' and is subject
+to the same limitations as compile time error checking checking;
+Backticks, [] tests,  and evals are not parsed so some 
+dependencies may be missed.
+
 @item --verbose
 Equivalent to @option{-v}.  Print shell input lines as they're read.
 
diff -up bash-3.2/doc/bash.1.requires bash-3.2/doc/bash.1
--- bash-3.2/doc/bash.1.requires	2008-12-09 14:02:01.000000000 +0100
+++ bash-3.2/doc/bash.1	2008-12-09 14:02:02.000000000 +0100
@@ -232,6 +232,13 @@ The shell becomes restricted (see
 .B "RESTRICTED SHELL"
 below).
 .TP
+.B \-\-rpm-requires
+Produce the list of files that are required for the 
+shell script to run.  This implies '-n' and is subject
+to the same limitations as compile time error checking checking;
+Backticks, [] tests,  and evals are not parsed so some 
+dependencies may be missed.
+.TP
 .B \-\-verbose
 Equivalent to  \fB\-v\fP.
 .TP
diff -up bash-3.2/make_cmd.c.requires bash-3.2/make_cmd.c
--- bash-3.2/make_cmd.c.requires	2006-09-12 15:21:22.000000000 +0200
+++ bash-3.2/make_cmd.c	2008-12-09 14:02:02.000000000 +0100
@@ -41,11 +41,15 @@ Foundation, 59 Temple Place, Suite 330, 
 #include "flags.h"
 #include "make_cmd.h"
 #include "dispose_cmd.h"
+#include "execute_cmd.h"
 #include "variables.h"
 #include "subst.h"
 #include "input.h"
 #include "ocache.h"
 #include "externs.h"
+#include "builtins.h"
+
+#include "builtins/common.h"
 
 #if defined (JOB_CONTROL)
 #include "jobs.h"
@@ -55,6 +59,10 @@ Foundation, 59 Temple Place, Suite 330, 
 
 extern int line_number, current_command_line_count;
 extern int last_command_exit_value;
+extern int rpm_requires;
+
+static char *alphabet_set = "abcdefghijklmnopqrstuvwxyz"
+                     "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
 
 /* Object caching */
 sh_obj_cache_t wdcache = {0, 0, 0};
@@ -789,6 +797,27 @@ make_subshell_command (command)
   return (make_command (cm_subshell, (SIMPLE_COM *)temp));
 }
 
+static void
+output_requirement (deptype, filename)
+const char *deptype;
+char *filename;
+{
+  if (strchr(filename, '$') || (filename[0] != '/' && strchr(filename, '/')))
+    return;
+
+  /* 
+      if the executable is called via variable substitution we can
+      not dermine what it is at compile time.  
+
+      if the executable consists only of characters not in the
+      alphabet we do not consider it a dependency just an artifact
+      of shell parsing (ex "exec < ${infile}").
+  */
+
+  if (strpbrk(filename, alphabet_set))
+    printf ("%s(%s)\n", deptype, filename);
+}
+
 /* Reverse the word list and redirection list in the simple command
    has just been parsed.  It seems simpler to do this here the one
    time then by any other method that I can think of. */
@@ -806,6 +835,27 @@ clean_simple_command (command)
 	REVERSE_LIST (command->value.Simple->redirects, REDIRECT *);
     }
 
+  if (rpm_requires && command->value.Simple->words)
+    {
+      char *cmd0;
+      char *cmd1;
+      struct builtin *b;
+
+      cmd0 = command->value.Simple->words->word->word;
+      b = builtin_address_internal (cmd0, 0);
+      cmd1 = 0;
+      if (command->value.Simple->words->next)
+        cmd1 = command->value.Simple->words->next->word->word;
+
+      if (b) {
+        if ( (b->flags & REQUIRES_BUILTIN) && cmd1)
+          output_requirement ("executable", cmd1);
+      } else {
+        if (!assignment(cmd0, 0))
+          output_requirement (find_function(cmd0) ? "function" : "executable", cmd0);
+      }
+    } /*rpm_requires*/
+
   return (command);
 }
 
diff -up bash-3.2/execute_cmd.c.requires bash-3.2/execute_cmd.c
--- bash-3.2/execute_cmd.c.requires	2008-12-09 14:02:02.000000000 +0100
+++ bash-3.2/execute_cmd.c	2008-12-09 15:19:29.000000000 +0100
@@ -476,6 +476,8 @@ async_redirect_stdin ()
 
 #define DESCRIBE_PID(pid) do { if (interactive) describe_pid (pid); } while (0)
 
+extern int rpm_requires;
+
 /* Execute the command passed in COMMAND, perhaps doing it asynchrounously.
    COMMAND is exactly what read_command () places into GLOBAL_COMMAND.
    ASYNCHROUNOUS, if non-zero, says to do this command in the background.
@@ -507,8 +509,13 @@ execute_command_internal (command, async
 #else
   if (breaking || continuing)
     return (last_command_exit_value);
-  if (command == 0 || read_but_dont_execute)
+  if (command == 0 || (read_but_dont_execute && !rpm_requires))
     return (EXECUTION_SUCCESS);
+  if (rpm_requires && command->type == cm_function_def)
+    return last_command_exit_value =
+      execute_intern_function (command->value.Function_def->name,
+                              command->value.Function_def->command);
+
 #endif
 
   QUIT;
@@ -4073,7 +4080,7 @@ execute_intern_function (name, function)
 
   if (check_identifier (name, posixly_correct) == 0)
     {
-      if (posixly_correct && interactive_shell == 0)
+      if (posixly_correct && interactive_shell == 0 && rpm_requires == 0)
 	{
 	  last_command_exit_value = EX_USAGE;
 	  jump_to_top_level (ERREXIT);
diff -up bash-3.2/execute_cmd.h.requires bash-3.2/execute_cmd.h
--- bash-3.2/execute_cmd.h.requires	2001-05-07 16:39:37.000000000 +0200
+++ bash-3.2/execute_cmd.h	2008-12-09 14:02:02.000000000 +0100
@@ -22,6 +22,8 @@
 #define _EXECUTE_CMD_H_
 
 #include "stdc.h"
+#include "variables.h"
+#include "command.h"
 
 extern struct fd_bitmap *new_fd_bitmap __P((int));
 extern void dispose_fd_bitmap __P((struct fd_bitmap *));
diff -up bash-3.2/builtins.h.requires bash-3.2/builtins.h
--- bash-3.2/builtins.h.requires	2004-12-30 19:59:05.000000000 +0100
+++ bash-3.2/builtins.h	2008-12-09 14:02:02.000000000 +0100
@@ -40,6 +40,7 @@
 #define STATIC_BUILTIN  0x4	/* This builtin is not dynamically loaded. */
 #define SPECIAL_BUILTIN 0x8	/* This is a Posix `special' builtin. */
 #define ASSIGNMENT_BUILTIN 0x10	/* This builtin takes assignment statements. */
+#define REQUIRES_BUILTIN 0x20	/* This builtin requires other files. */
 
 #define BASE_INDENT	4
 
diff -up bash-3.2/eval.c.requires bash-3.2/eval.c
--- bash-3.2/eval.c.requires	2006-03-19 23:30:26.000000000 +0100
+++ bash-3.2/eval.c	2008-12-09 14:02:02.000000000 +0100
@@ -53,6 +53,7 @@ extern int last_command_exit_value, stdi
 extern int need_here_doc;
 extern int current_command_number, current_command_line_count, line_number;
 extern int expand_aliases;
+extern int rpm_requires;
 
 static void send_pwd_to_eterm __P((void));
 static sighandler alrm_catcher __P((int));
@@ -131,7 +132,7 @@ reader_loop ()
 
       if (read_command () == 0)
 	{
-	  if (interactive_shell == 0 && read_but_dont_execute)
+	  if (interactive_shell == 0 && (read_but_dont_execute && !rpm_requires))
 	    {
 	      last_command_exit_value = EXECUTION_SUCCESS;
 	      dispose_command (global_command);
diff -up bash-3.2/builtins/mkbuiltins.c.requires bash-3.2/builtins/mkbuiltins.c
--- bash-3.2/builtins/mkbuiltins.c.requires	2006-03-07 22:41:57.000000000 +0100
+++ bash-3.2/builtins/mkbuiltins.c	2008-12-09 14:02:02.000000000 +0100
@@ -69,8 +69,13 @@ extern char *strcpy ();
 #define whitespace(c) (((c) == ' ') || ((c) == '\t'))
 
 /* Flag values that builtins can have. */
+/*  These flags are for the C code generator, 
+    the C which is produced (./builtin.c)
+    includes the flags definitions found 
+    in ../builtins.h */
 #define BUILTIN_FLAG_SPECIAL	0x01
 #define BUILTIN_FLAG_ASSIGNMENT 0x02
+#define BUILTIN_FLAG_REQUIRES	0x04
 
 #define BASE_INDENT	4
 
@@ -154,9 +159,17 @@ char *assignment_builtins[] =
   (char *)NULL
 };
 
+/* The builtin commands that cause requirements on other files. */
+static char *requires_builtins[] =
+{
+  ".", "command", "exec", "source", "inlib",
+  (char *)NULL
+};
+
 /* Forward declarations. */
 static int is_special_builtin ();
 static int is_assignment_builtin ();
+static int is_requires_builtin ();
 
 #if !defined (HAVE_RENAME)
 static int rename ();
@@ -800,6 +813,8 @@ builtin_handler (self, defs, arg)
     new->flags |= BUILTIN_FLAG_SPECIAL;
   if (is_assignment_builtin (name))
     new->flags |= BUILTIN_FLAG_ASSIGNMENT;
+  if (is_requires_builtin (name))
+    new->flags |= BUILTIN_FLAG_REQUIRES;
 
   array_add ((char *)new, defs->builtins);
   building_builtin = 1;
@@ -1217,10 +1232,11 @@ write_builtins (defs, structfile, extern
 		  else
 		    fprintf (structfile, "(sh_builtin_func_t *)0x0, ");
 
-		  fprintf (structfile, "%s%s%s, %s_doc,\n",
+		  fprintf (structfile, "%s%s%s%s, %s_doc,\n",
 		    "BUILTIN_ENABLED | STATIC_BUILTIN",
 		    (builtin->flags & BUILTIN_FLAG_SPECIAL) ? " | SPECIAL_BUILTIN" : "",
 		    (builtin->flags & BUILTIN_FLAG_ASSIGNMENT) ? " | ASSIGNMENT_BUILTIN" : "",
+		    (builtin->flags & BUILTIN_FLAG_REQUIRES) ? " | REQUIRES_BUILTIN" : "",
 		    document_name (builtin));
 
 		  fprintf
@@ -1561,6 +1577,13 @@ is_assignment_builtin (name)
   return (_find_in_table (name, assignment_builtins));
 }
 
+static int
+is_requires_builtin (name)
+     char *name;
+{
+  return (_find_in_table (name, requires_builtins));
+}
+
 #if !defined (HAVE_RENAME)
 static int
 rename (from, to)
